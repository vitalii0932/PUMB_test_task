Завдання:
1. Створити АПІ, з методом POST по шляху files/uploads, який матиме підтримку CSV і XML файлів (приклади файлів з тестовими даними у атачментах).
2. Замапити об‘єкти з файлів на POJO.
3. Виконати валідацію вхідних об‘єктів, і приймати тільки ті що мають ім‘я, тип, стать, вагу та вартість. Об‘єкти, що не виконують вимогам - скіпаються.
4. Назначити категорії тваринам по вартості.
5. 0 - 20 - 1ша категорія, 21-40 - 2га, 41-60 - 3тя, від 61 - 4та.
6. Зробити 1 метод GET який буде мати параметри фільтрації по типу тваринки, категорії, статі, а також можливість сортування по будь якому з присутніх в об‘єкті полів та повертати відповідь у json форматі в body.
7. Зробити swagger file з описом API.
8. Покрити юніт тестами.
9. Тип сховища на ваш розсуд, але пам‘ятайте, ще сервіс після рестарту має не втратити об‘єктів.


Технології:
- Java - мова програмування, на якій базується весь проєкт.
- HTML, CSS, JS - технології, використовувані для створення веб-інтерфейсу.
- Spring Boot - фреймворк для розробки веб-додатків на основі Spring.
- Spring MVC - архітектурний шаблон проєктування для побудови веб-додатків у Spring.
- Spring Security - фреймворк для забезпечення безпеки веб-додатків у Spring.
- Spring Retry - бібліотека для створення механізму повторних спроб у Spring.
- JWT - JSON Web Tokens, технологія для забезпечення безпеки обміну даними між сторонами.
- Spring Data JPA - частина Spring для роботи з базами даних через JPA.
- H2 Database - вбудована база даних для розробки та тестування.
- Lombok - бібліотека для зменшення кількості коду, що пишеться розробником.
- OpenAPI - інструмент для автоматичної генерації документації API на основі специфікації OpenAPI.


Використання:
1. Головна сторінка: /api/v1/test_task
    - для завантаження файлу в другому контейнері необхідно натиснути на кнопку 'Завантажте файл' та обрати файл після чого натиснути на кнопку 'Надіслати файл'. Якщо файл оброблено коректно то буде отримано відповідне повідомлення. У випадку коли файл не корректний буде отримано повідомлення з причиною помилки;
    - для пошуку тварин за параметрами необхідно у випадаючих списках обрати необхідні параметри та натиснути на кнопку 'Пошук елементів'.

2. Доступ до БД /h2-console. Дані для входу на СУБД: login: vetal; password: password Дана сторінка знаходиться під захистом і користувача буде перенаправлено на сторінку авторизації. Варіанти отримати доступ:
    - за замовчуванням дані для входу наступні:
        {
          "email": "admin_test@com.ua",
          "password": "admin"
        }
    - в Talend API Tester або PostMan надіслати POST запит на шлях /api/v1/auth/registration у форматі:
        {
          "email": "email@gmail.com",
          "password": "password"
        }

!!!Важливо:

JWT токен вбудовується в Cookie, тож для того щоб його видалити необхідно або повернутися на сторінку /api/v1/auth, де необхідно натиснути на кнопку 'Logout' після чого Cookie буде видалено, або видалити його вручну.

3. Доступ до swagger /swagger-ui/index.html. На сторінці Swagger можна також протестувати всі функції.
4. Реєстрація нового користувача в системі /api/v1/auth/registration. В Talend API Tester або PostMan надіслати POST запит на шлях /api/v1/auth/registration у форматі:
    {
      "email": "email@gmail.com",
      "password": "password"
    }